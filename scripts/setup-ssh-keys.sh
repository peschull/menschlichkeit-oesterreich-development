#!/bin/bash
# SSH-Schl√ºssel Setup f√ºr GitHub Secrets und Plesk
# Automatisierte Konfiguration

set -uo pipefail

echo "=========================================="
echo "SSH-Schl√ºssel Setup"
echo "GitHub Secrets + Plesk Server"
echo "=========================================="
echo ""

# Variablen
SSH_PRIVATE_KEY="$HOME/.ssh/id_ed25519"
SSH_PUBLIC_KEY="$HOME/.ssh/id_ed25519.pub"
GITHUB_TOKEN="${GITHUB_TOKEN:-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}"
GITHUB_REPO="peschull/menschlichkeit-oesterreich-development"
PLESK_HOST="dmpl20230054@5.183.217.146"

# Pr√ºfe SSH-Schl√ºssel
if [[ ! -f "$SSH_PRIVATE_KEY" ]]; then
    echo "‚ùå SSH Private Key nicht gefunden: $SSH_PRIVATE_KEY"
    echo "Bitte zuerst generieren: ssh-keygen -t ed25519"
    exit 1
fi

if [[ ! -f "$SSH_PUBLIC_KEY" ]]; then
    echo "‚ùå SSH Public Key nicht gefunden: $SSH_PUBLIC_KEY"
    exit 1
fi

echo "‚úÖ SSH-Schl√ºssel gefunden:"
echo "   Private: $SSH_PRIVATE_KEY"
echo "   Public:  $SSH_PUBLIC_KEY"
echo ""

# ============================================
# SCHRITT 1: GitHub Repository Secret setzen
# ============================================

echo "=========================================="
echo "SCHRITT 1: GitHub Repository Secret"
echo "=========================================="
echo ""

# Private Key base64-kodieren f√ºr sichere √úbertragung
PRIVATE_KEY_CONTENT=$(cat "$SSH_PRIVATE_KEY")

# GitHub Secrets API verwenden (nur f√ºr Repository Secrets, nicht Codespaces)
echo "üì§ Uploading SSH_PRIVATE_KEY to GitHub Repository Secrets..."

# Erst Public Key des Repositories holen f√ºr Verschl√ºsselung
REPO_PUBLIC_KEY=$(curl -s \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  "https://api.github.com/repos/$GITHUB_REPO/actions/secrets/public-key")

REPO_KEY_ID=$(echo "$REPO_PUBLIC_KEY" | jq -r '.key_id')
REPO_KEY=$(echo "$REPO_PUBLIC_KEY" | jq -r '.key')

if [[ -z "$REPO_KEY_ID" ]] || [[ "$REPO_KEY_ID" == "null" ]]; then
    echo "‚ùå Fehler: Konnte Repository Public Key nicht abrufen"
    echo "   Bitte pr√ºfe GitHub Token Permissions (muss 'repo' scope haben)"
    echo ""
    echo "‚ö†Ô∏è  ALTERNATIVE: Manuell √ºber GitHub Web-UI:"
    echo "   1. Gehe zu: https://github.com/$GITHUB_REPO/settings/secrets/actions"
    echo "   2. Klicke: 'New repository secret'"
    echo "   3. Name: SSH_PRIVATE_KEY"
    echo "   4. Value: (siehe unten)"
    echo ""
    echo "=========================================="
    echo "PRIVATE KEY f√ºr GitHub Secret:"
    echo "=========================================="
    cat "$SSH_PRIVATE_KEY"
    echo "=========================================="
    echo ""
else
    echo "‚úÖ Repository Public Key abgerufen (Key ID: $REPO_KEY_ID)"

    # Python f√ºr libsodium-Verschl√ºsselung (GitHub erfordert das)
    # Alternative: Manuell, da libsodium nicht installiert ist
    echo ""
    echo "‚ö†Ô∏è  GitHub Secrets API erfordert libsodium-Verschl√ºsselung"
    echo "   In Codespaces nicht verf√ºgbar ‚Üí Manuelle Eingabe erforderlich"
    echo ""
    echo "üìã BITTE MANUELL EINGEBEN:"
    echo "   1. URL: https://github.com/$GITHUB_REPO/settings/secrets/actions"
    echo "   2. 'New repository secret'"
    echo "   3. Name: SSH_PRIVATE_KEY"
    echo "   4. Value: (kopiere den folgenden Private Key)"
    echo ""
    echo "=========================================="
    echo "PRIVATE KEY (f√ºr GitHub Secret kopieren):"
    echo "=========================================="
    cat "$SSH_PRIVATE_KEY"
    echo "=========================================="
    echo ""
fi

read -p "Hast du SSH_PRIVATE_KEY in GitHub Secrets eingef√ºgt? (j/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Jj]$ ]]; then
    echo "‚ö†Ô∏è  Bitte GitHub Secret manuell setzen und Skript erneut ausf√ºhren"
    exit 1
fi

echo "‚úÖ GitHub Secret SSH_PRIVATE_KEY konfiguriert"
echo ""

# ============================================
# SCHRITT 2: Public Key auf Plesk-Server
# ============================================

echo "=========================================="
echo "SCHRITT 2: Public Key auf Plesk-Server"
echo "=========================================="
echo ""

echo "üìã Public Key f√ºr Plesk:"
echo "=========================================="
cat "$SSH_PUBLIC_KEY"
echo "=========================================="
echo ""

echo "üîß Methoden zum Hinzuf√ºgen auf Plesk-Server:"
echo ""
echo "METHODE 1: ssh-copy-id (empfohlen)"
echo "-------------------------------------------"
echo "ssh-copy-id -i $SSH_PUBLIC_KEY $PLESK_HOST"
echo ""
echo "METHODE 2: Manuell per SSH"
echo "-------------------------------------------"
echo "ssh $PLESK_HOST 'mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo \"$(cat $SSH_PUBLIC_KEY)\" >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'"
echo ""
echo "METHODE 3: Plesk Panel (Web-UI)"
echo "-------------------------------------------"
echo "1. Login: https://5.183.217.146:8443"
echo "2. Tools & Settings ‚Üí SSH Keys"
echo "3. 'Add Key' ‚Üí Public Key einf√ºgen"
echo ""

read -p "Public Key jetzt auf Plesk-Server hinzuf√ºgen? (j/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Jj]$ ]]; then
    echo ""
    echo "üîë Versuche ssh-copy-id..."
    if command -v ssh-copy-id &>/dev/null; then
        ssh-copy-id -i "$SSH_PUBLIC_KEY" "$PLESK_HOST"
        SSH_COPY_EXIT=$?

        if [[ $SSH_COPY_EXIT -eq 0 ]]; then
            echo "‚úÖ Public Key erfolgreich auf Plesk-Server hinzugef√ºgt"
        else
            echo "‚ùå ssh-copy-id fehlgeschlagen (Exit Code: $SSH_COPY_EXIT)"
            echo "Bitte manuell √ºber Methode 2 oder 3 hinzuf√ºgen"
        fi
    else
        echo "‚ö†Ô∏è  ssh-copy-id nicht verf√ºgbar"
        echo "Verwende manuelle Methode..."

        ssh -o StrictHostKeyChecking=no "$PLESK_HOST" \
            "mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo '$(cat $SSH_PUBLIC_KEY)' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys" \
            && echo "‚úÖ Public Key manuell hinzugef√ºgt" \
            || echo "‚ùå Manuelle Hinzuf√ºgung fehlgeschlagen"
    fi
else
    echo "‚ö†Ô∏è  Bitte Public Key manuell auf Plesk-Server hinzuf√ºgen"
fi

echo ""

# ============================================
# SCHRITT 3: SSH-Verbindung testen
# ============================================

echo "=========================================="
echo "SCHRITT 3: SSH-Verbindung testen"
echo "=========================================="
echo ""

read -p "SSH-Verbindung zu Plesk jetzt testen? (j/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Jj]$ ]]; then
    echo ""
    echo "üîó Teste SSH-Verbindung mit neuem Schl√ºssel..."

    if ssh -i "$SSH_PRIVATE_KEY" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$PLESK_HOST" \
        "echo '‚úÖ SSH-Verbindung erfolgreich!' && hostname && whoami && pwd"; then
        echo ""
        echo "‚úÖ SSH-SETUP ERFOLGREICH ABGESCHLOSSEN!"
        echo ""
        echo "üìã N√§chste Schritte:"
        echo "   1. SSH-Schl√ºssel in .env hinzuf√ºgen:"
        echo "      SSH_KEY=$SSH_PRIVATE_KEY"
        echo ""
        echo "   2. Subdomain-Setup durchf√ºhren:"
        echo "      bash scripts/check-subdomain-dns.sh"
        echo ""
        echo "   3. Deployment testen:"
        echo "      bash scripts/safe-deploy.sh --dry-run"
        echo ""
    else
        echo ""
        echo "‚ùå SSH-Verbindung fehlgeschlagen"
        echo ""
        echo "Troubleshooting:"
        echo "  1. Public Key korrekt auf Server? (siehe Methoden oben)"
        echo "  2. Private Key Permissions: chmod 600 $SSH_PRIVATE_KEY"
        echo "  3. SSH-Agent l√§uft? eval \$(ssh-agent) && ssh-add $SSH_PRIVATE_KEY"
        echo "  4. Firewall blockiert Port 22?"
        echo ""
    fi
else
    echo "‚ö†Ô∏è  SSH-Test √ºbersprungen"
fi

echo ""
echo "=========================================="
echo "üìÑ ZUSAMMENFASSUNG"
echo "=========================================="
echo ""
echo "SSH-Schl√ºssel:"
echo "  Private: $SSH_PRIVATE_KEY"
echo "  Public:  $SSH_PUBLIC_KEY"
echo ""
echo "GitHub Secret:"
echo "  Name: SSH_PRIVATE_KEY"
echo "  Repo: $GITHUB_REPO"
echo "  URL:  https://github.com/$GITHUB_REPO/settings/secrets/actions"
echo ""
echo "Plesk Server:"
echo "  Host: $PLESK_HOST"
echo "  Key Location: ~/.ssh/authorized_keys"
echo ""
echo "Verwendung:"
echo "  ssh -i $SSH_PRIVATE_KEY $PLESK_HOST"
echo ""
echo "=========================================="
