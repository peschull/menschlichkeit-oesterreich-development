# üöÄ menschlichkeit-oesterreich GitHub Actions Log Downloader
# Einfaches Script zum Download und Analyse aller Workflow-Logs

# Import des PowerShell-Moduls
Import-Module .\scripts\Download-GitHubWorkflowLogs.psm1 -Force

# Configuration
$repoOwner = "peschull"
$repoName = "menschlichkeit-oesterreich-development"

# Token Management - Sichere Eingabe
$githubToken = $env:GITHUB_TOKEN

if (-not $githubToken) {
    Write-Host "üîê GitHub Token Setup" -ForegroundColor Cyan
    Write-Host "============================================" -ForegroundColor Gray
    Write-Host "1Ô∏è‚É£ Erstelle Token: https://github.com/settings/tokens" -ForegroundColor Yellow
    Write-Host "2Ô∏è‚É£ Berechtigungen: repo + workflow" -ForegroundColor Yellow
    Write-Host "3Ô∏è‚É£ Token hier eingeben (wird nicht angezeigt)" -ForegroundColor Yellow
    Write-Host ""
    
    # Sichere Token-Eingabe ohne Anzeige
    $secureToken = Read-Host "GitHub Token eingeben" -AsSecureString
    $githubToken = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureToken))
    
    if (-not $githubToken -or $githubToken.Length -lt 10) {
        Write-Host "‚ùå Ung√ºltiger Token!" -ForegroundColor Red
        Write-Host "Token muss mindestens 10 Zeichen haben und mit 'ghp_' beginnen" -ForegroundColor Yellow
        exit 1
    }
    
    # Validation: GitHub Token Format
    if (-not $githubToken.StartsWith("ghp_") -and -not $githubToken.StartsWith("github_pat_")) {
        Write-Host "‚ö†Ô∏è Token Format Warning: Erwartet 'ghp_' oder 'github_pat_' Prefix" -ForegroundColor Yellow
        $continue = Read-Host "Trotzdem fortfahren? (y/n)"
        if ($continue -ne 'y' -and $continue -ne 'yes') {
            exit 1
        }
    }
    
    Write-Host "‚úÖ Token akzeptiert!" -ForegroundColor Green
    Write-Host ""
}

Write-Host "üéØ menschlichkeit-oesterreich GitHub Actions Log Analyzer" -ForegroundColor Cyan
Write-Host "=====================================================" -ForegroundColor Gray

# Menu f√ºr verschiedene Optionen
Write-Host "`nüìã Available Options:" -ForegroundColor Yellow
Write-Host "1Ô∏è‚É£  Download all workflow logs (last 50 runs)" -ForegroundColor White
Write-Host "2Ô∏è‚É£  Download + Extract + Meta-Analysis" -ForegroundColor White  
Write-Host "3Ô∏è‚É£  List available workflows" -ForegroundColor White
Write-Host "4Ô∏è‚É£  Download specific workflow only" -ForegroundColor White
Write-Host "5Ô∏è‚É£  Quick analysis (last 10 runs)" -ForegroundColor White

$choice = Read-Host "`nSelect option (1-5)"

switch ($choice) {
    "1" {
        Write-Host "`nüöÄ Downloading all workflow logs..." -ForegroundColor Green
        Download-GitHubWorkflowLogs -RepoOwner $repoOwner -RepoName $repoName -GitHubToken $githubToken -MaxRuns 50
    }
    
    "2" {
        Write-Host "`nüß† Full analysis with extraction and meta-analysis..." -ForegroundColor Green
        Download-GitHubWorkflowLogs -RepoOwner $repoOwner -RepoName $repoName -GitHubToken $githubToken -MaxRuns 30 -ExtractLogs -MetaAnalysis -CleanupZips
    }
    
    "3" {
        Write-Host "`nüìã Fetching available workflows..." -ForegroundColor Green
        Get-WorkflowSummary -RepoOwner $repoOwner -RepoName $repoName -GitHubToken $githubToken
    }
    
    "4" {
        Write-Host "`nüîç Available workflows:" -ForegroundColor Yellow
        $workflows = Get-WorkflowSummary -RepoOwner $repoOwner -RepoName $repoName -GitHubToken $githubToken
        
        if ($workflows.Count -gt 0) {
            $workflowName = Read-Host "`nEnter workflow name to download"
            Download-GitHubWorkflowLogs -RepoOwner $repoOwner -RepoName $repoName -GitHubToken $githubToken -WorkflowNames @($workflowName) -ExtractLogs
        }
    }
    
    "5" {
        Write-Host "`n‚ö° Quick analysis (last 10 runs)..." -ForegroundColor Green
        Download-GitHubWorkflowLogs -RepoOwner $repoOwner -RepoName $repoName -GitHubToken $githubToken -MaxRuns 10 -ExtractLogs -MetaAnalysis
    }
    
    default {
        Write-Host "‚ùå Invalid selection. Please run the script again." -ForegroundColor Red
        exit 1
    }
}

Write-Host "`n‚úÖ Operation completed! Check the GitHubLogs folder in your user directory." -ForegroundColor Green
Write-Host "üìÅ Full path: $env:USERPROFILE\GitHubLogs\menschlichkeit-oesterreich" -ForegroundColor Gray

# Token-Sicherheit: Aus Speicher l√∂schen
if ($githubToken) {
    $githubToken = $null
    Write-Host "üîí Token aus Speicher gel√∂scht (Sicherheit)" -ForegroundColor Gray
}

# Optional: Token f√ºr Session speichern
if (-not $env:GITHUB_TOKEN) {
    $saveToken = Read-Host "`nToken f√ºr diese PowerShell-Session speichern? (y/n)"
    if ($saveToken -eq 'y' -or $saveToken -eq 'yes') {
        # Token nur f√ºr aktuelle Session setzen (nicht persistent)
        $env:GITHUB_TOKEN = $githubToken
        Write-Host "‚úÖ Token f√ºr Session gespeichert. N√§chste Ausf√ºhrung wird Token automatisch finden." -ForegroundColor Green
    }
}

# Optional: Open output folder
$openFolder = Read-Host "`nOpen output folder? (y/n)"
if ($openFolder -eq 'y' -or $openFolder -eq 'yes') {
    $outputPath = "$env:USERPROFILE\GitHubLogs\menschlichkeit-oesterreich"
    if (Test-Path $outputPath) {
        Invoke-Item $outputPath
    }
}