{
  "name": "workspace-development-tools",
  "version": "1.0.0",
  "description": "Development tools for Menschlichkeit Österreich workspace",
  "type": "module",
  "private": true,
  "workspaces": [
    "frontend",
    "website",
    "mcp-servers/*",
    "servers",
    "mcp-bridge",
    "mcp-search",
    "automation/n8n"
  ],
  "scripts": {
    "install:all": "npm install --workspaces",
    "build:workspaces": "npm run build --workspaces",
    "test:all": "npm run test --workspaces",
    "lint:js": "eslint **/*.{js,ts} --fix",
    "md:fix-fences": "node scripts/fix-fenced-code-language.mjs .github docs",
    "lint:md": "npm run md:fix-fences && markdownlint **/*.md --fix",
    "format": "prettier --write **/*.{js,ts,json,md}",
    "format:php": "composer exec php-cs-fixer fix",
    "lint:php": "composer exec phpstan analyse",
    "setup:dev": "npm run install:all && npm run setup:composer && npm run setup:environments",
    "setup:composer": "composer install --no-dev --optimize-autoloader",
    "setup:environments": "bash scripts/setup-environments.sh || pwsh scripts/setup-environments.ps1",
    "clean": "node scripts/clean-workspace.mjs",
    "clean:dry-run": "node scripts/clean-workspace.mjs --dry-run",
    "clean:dist": "node scripts/clean-workspace.mjs --only=dist,build",
    "clean:node-modules": "node scripts/clean-workspace.mjs --only=node_modules",
    "dev:all": "concurrently \"npm run dev:crm\" \"npm run dev:api\" \"npm run dev:frontend\" \"npm run dev:games\"",
    "dev:crm": "cd crm.menschlichkeit-oesterreich.at && php -S localhost:8000 -t httpdocs",
    "dev:api": "bash scripts/start-api-dev.sh",
    "dev:frontend": "npm run dev --workspace=frontend",
    "dev:games": "cd web && python -m http.server 3000",
    "dev:essential": "npm run dev --workspace=mcp-servers/essential-stack",
    "dev:web": "npm run dev --workspace=mcp-servers/web-stack",
    "build:all": "npm run build:frontend && npm run build:games && npm run build:api",
    "build:frontend": "npm run build --workspace=frontend",
    "build:games": "bash scripts/build-games.sh || pwsh scripts/build-games.ps1",
    "build:api": "cd api.menschlichkeit-oesterreich.at && python -m build",
    "test:integration": "playwright test",
    "test:unit": "vitest",
    "test:e2e": "npm run test:integration",
    "deploy:all": "npm run deploy:crm && npm run deploy:api && npm run deploy:frontend",
    "deploy:crm": "pwsh scripts/deploy-crm.ps1",
    "deploy:api": "pwsh scripts/deploy-api.ps1",
    "deploy:frontend": "pwsh scripts/deploy-frontend.ps1",
    "lh:website": "npm run lh:ci --workspace=website",
    "lint": "eslint .",
    "lint:sarif": "eslint . -f sarif -o eslint.sarif || true",
    "lint:all": "npm run lint:js && npm run lint:php && npm run lint:md",
    "format:all": "npm run format && npm run format:php",
    "quality:codacy": "echo '⏭️  Skipping Codacy (using codacy-mcp-server via MCP instead)' && touch quality-reports/codacy-analysis.sarif || true",
    "quality:codacy-cli": "bash -c 'if command -v codacy-analysis-cli >/dev/null 2>&1; then codacy-analysis-cli analyze --directory . --format sarif --output quality-reports/codacy-analysis.sarif; else echo \"❌ Codacy CLI nicht installiert - überspringe\"; touch quality-reports/codacy-analysis.sarif; fi' || true",
    "security:trivy": "./bin/trivy fs --format sarif --output quality-reports/trivy-security.sarif . || true",
    "security:scan": "npm run security:trivy && ./bin/gitleaks detect --report-path quality-reports/secrets-scan.json --report-format json || true",
    "performance:lighthouse": "bash -c 'if command -v google-chrome >/dev/null 2>&1 || command -v chromium >/dev/null 2>&1; then npm run lh:ci --workspace=frontend; else echo \"⏭️ Skipping Lighthouse (Chrome not available - run .devcontainer/install-quality-tools.sh or use performance:lighthouse-local)\"; fi' || true",
    "performance:lighthouse-local": "npm run lh:ci --workspace=frontend",
    "compliance:dsgvo": "bash scripts/dsgvo-check.sh || pwsh scripts/dsgvo-check.ps1",
    "quality:reports": "node scripts/generate-quality-report.js",
    "github:normalize": "python3 scripts/normalize-frontmatter.py",
    "github:validate": "python3 scripts/validate-github-files.py",
    "github:migration-guide": "python3 scripts/generate-migration-guide.py",
    "docs:adr-index": "node scripts/docs/generate-adr-index.mjs",
    "quality:gates": "npm run quality:codacy && npm run security:scan && npm run performance:lighthouse && npm run compliance:dsgvo && npm run quality:reports",
    "logs:purge": "python3 scripts/purge-logs.py",
    "logs:purge:dry-run": "python3 scripts/purge-logs.py --dry-run --verbose",
    "figma:sync": "node scripts/figma-token-sync.cjs",
    "figma:sync:watch": "nodemon --watch figma-design-system scripts/figma-token-sync.cjs",
    "design:tokens": "npm run figma:sync && npm run build:frontend",
    "design:docs": "storybook build && npm run figma:sync",
    "n8n:start": "cd automation/n8n && docker-compose up -d",
    "n8n:stop": "cd automation/n8n && docker-compose down",
    "n8n:logs": "cd automation/n8n && docker-compose logs -f n8n",
    "n8n:restart": "npm run n8n:stop && npm run n8n:start",
    "n8n:webhook": "node automation/n8n/webhook-client.js",
    "n8n:setup": "cd automation/n8n && cp .env.example .env && echo 'Please configure automation/n8n/.env with your settings'",
    "n8n:smoke": "python3 automation/n8n/smoke-test.py",
    "mcp:setup": "bash scripts/setup-mcp-servers.sh",
    "mcp:check": "bash scripts/mcp-health-check.sh",
    "mcp:install": "npm install -g @modelcontextprotocol/server-filesystem @modelcontextprotocol/server-memory figma-mcp @notionhq/notion-mcp-server enhanced-postgres-mcp-server @upstash/context7-mcp",
    "mcp:list": "cat mcp.json | jq '.servers | keys'",
    "mcp:chat:start": "node mcp-servers/chatgpt-app-server/index.js",
    "mcp:docs": "cat docs/MCP-SERVER-SETUP-DE.md",
    "performance:setup": "bash scripts/performance/mcp-performance-optimization.sh",
    "performance:report": "node scripts/performance/generate-report.cjs",
    "performance:test": "k6 run scripts/performance/load-test.js",
    "performance:monitor": "node scripts/performance/web-vitals-tracker.js",
    "performance:cache": "bash scripts/performance/redis-cache-setup.sh",
    "deploy:dashboard": "bash deployment-scripts/deployment-dashboard.sh",
    "deploy:readiness": "bash deployment-scripts/deployment-readiness.sh",
    "deploy:multi-service": "bash deployment-scripts/multi-service-deploy.sh",
    "deploy:blue-green": "bash deployment-scripts/blue-green-deploy.sh",
    "deploy:staging": "bash deployment-scripts/multi-service-deploy.sh staging",
    "deploy:production": "bash deployment-scripts/multi-service-deploy.sh production",
    "deploy:monitor": "bash deployment-scripts/deployment-monitoring.sh",
    "deploy:rollback": "bash deployment-scripts/rollback.sh",
    "deploy:smoke-tests": "bash deployment-scripts/smoke-tests.sh",
    "deploy:health-check": "bash deployment-scripts/health-check-utils.sh",
    "deploy:setup-env": "bash deployment-scripts/setup-environment.sh",
    "sandbox:cleanup": "bash scripts/sandbox-cleanup.sh",
    "sandbox:validate": "npm run quality:gates -- --target .ai-sandbox"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@jest/globals": "^30.2.0",
    "@playwright/test": "^1.55.1",
    "@types/jest": "^30.0.0",
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    "@typescript-eslint/parser": "^8.44.1",
    "@vitest/ui": "^3.2.4",
    "concurrently": "^9.2.1",
    "eslint": "^9.36.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "fast-check": "^3.23.2",
    "globals": "^15.12.0",
    "jest": "^30.2.0",
    "js-yaml": "^4.1.0",
    "jsdom": "^27.0.0",
    "jsdom-global": "^3.0.2",
    "markdownlint-cli": "^0.43.0",
    "n8n-workflow": "^1.17.0",
    "prettier": "^3.4.2",
    "prisma": "^6.17.0",
    "tailwindcss-animate": "^1.0.7",
    "ts-jest": "^29.4.4",
    "typescript": "^5.9.2",
    "vitest": "^3.2.4"
  },
  "engines": {
    "node": ">=22.20.0",
    "npm": ">=10.9.0"
  },
  "keywords": [
    "mcp",
    "model-context-protocol",
    "development-tools",
    "linting",
    "formatting",
    "austria",
    "non-profit"
  ],
  "author": "Menschlichkeit Österreich",
  "license": "MIT",
  "dependencies": {
    "@codacy/codacy-mcp": "^0.6.18",
    "@prisma/client": "^6.17.0",
    "vite": "7.1.9"
  }
}
