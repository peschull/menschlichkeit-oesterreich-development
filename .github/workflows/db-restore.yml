name: DB Restore (Artifact/URL → Plesk)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (z. B. stage|prod)"
        required: true
        default: "stage"
      dump_url:
        description: "Presigned URL zu dump.sql.gz"
        required: true
      confirm:
        description: "Gib 'PROD' ein, um auf prod zu schreiben (sonst Abbruch)."
        required: false
        default: ""

permissions:
  contents: read

jobs:
  restore:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      SSH_HOST: ${{ secrets.PLESK_HOST }}
      SSH_PORT: ${{ secrets.PLESK_SSH_PORT || '22' }}
      SSH_USER: ${{ secrets.PLESK_USER }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
    steps:
      - name: Safeguard (prod)
        if: ${{ inputs.environment == 'prod' }}
        run: |
          if [[ "${{ inputs.confirm }}" != "PROD" ]]; then
            echo "Abbruch: PROD nicht bestätigt." >&2
            exit 1
          fi

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387 # ref: v0.9.0
        with:
          ssh-private-key: ${{ secrets.PLESK_SSH_KEY }}

      - name: Trust host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ env.SSH_PORT }}" -H "${{ env.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Restore DB from URL
        run: |
          curl -fsSL "${{ inputs.dump_url }}" -o dump.sql.gz
          gunzip -c dump.sql.gz | ssh -p "${{ env.SSH_PORT }}" "${{ env.SSH_USER }}@${{ env.SSH_HOST }}" \
            "MYSQL_PWD='${{ env.DB_PASS }}' mysql -h '${{ env.DB_HOST }}' -u '${{ env.DB_USER }}' '${{ env.DB_NAME }}'"
