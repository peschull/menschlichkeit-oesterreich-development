name: CI/CD Pipeline - Multi-Technology Stack

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PHP_VERSION: '8.1'

jobs:
  # ============================================================================
  # TYPESCRIPT/JAVASCRIPT TESTING
  # ============================================================================
  test-typescript:
    name: 🔷 TypeScript/JavaScript Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project:
          - 'frontend'
          - 'website'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check project exists
        id: check-project
        env:
          PROJECT_PATH: ${{ matrix.project }}
        run: |
          if [ -d "$PROJECT_PATH" ]; then
            echo "project_exists=1" >> "$GITHUB_OUTPUT"
          else
            echo "project_exists=0" >> "$GITHUB_OUTPUT"
          fi

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.project }}/package-lock.json'

      - name: 🔧 Install Dependencies
        if: ${{ steps.check-project.outputs.project_exists == '1' }}
        working-directory: ${{ matrix.project }}
        run: npm ci
      - name: Skip note (typescript project missing)
        if: ${{ steps.check-project.outputs.project_exists == '0' }}
        run: |
          echo "Skip: ${{ matrix.project }} folder not present in this commit."

      - name: 🧹 ESLint Code Quality Check
        working-directory: ${{ matrix.project }}
        run: npm run lint --if-present

      - name: 🏗️ TypeScript Build
        working-directory: ${{ matrix.project }}
        run: npm run build --if-present

      - name: 🧪 Run Tests
        working-directory: ${{ matrix.project }}
        run: npm test --if-present

      - name: 📊 Upload Coverage Reports
        if: success()
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.project }}
          flags: typescript-${{ matrix.project }}

  # ============================================================================
  # PYTHON TESTING
  # ============================================================================
  test-python:
    name: 🐍 Python Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        project:
          - 'api.menschlichkeit-oesterreich.at'
          - 'servers'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install uv Package Manager
        run: pip install uv

      - name: 🔧 Install Dependencies
        if: ${{ steps.check-project.outputs.project_exists == '1' }}
        working-directory: ${{ matrix.project }}
        run: |
          if [ -f "pyproject.toml" ]; then
            uv pip install --system -e .
          elif [ -f "requirements.txt" ]; then
            uv pip install --system -r requirements.txt
          fi
      - name: Skip note (python project missing)
        if: ${{ steps.check-project.outputs.project_exists == '0' }}
        run: |
          echo "Skip: ${{ matrix.project }} folder not present."

      - name: 🧹 Flake8 Linting
        working-directory: ${{ matrix.project }}
        run: python -m flake8 . --extend-ignore=E501,W503 --max-line-length=100

      - name: 🎨 Black Code Formatting Check
        working-directory: ${{ matrix.project }}
        run: python -m black --check --diff .

      - name: 🔍 MyPy Type Checking
        working-directory: ${{ matrix.project }}
        run: python -m mypy . --ignore-missing-imports
        continue-on-error: true

      - name: 🧪 Pytest Tests
        if: ${{ steps.check-project.outputs.project_exists == '1' }}
        working-directory: ${{ matrix.project }}
        run: python -m pytest --cov=. --cov-report=xml --verbose
        continue-on-error: true

      - name: 📊 Upload Python Coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ matrix.project }}
          flags: python-${{ matrix.project }}

  # ============================================================================
  # PHP TESTING
  # ============================================================================
  test-php:
    name: 🐘 PHP Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.1', '8.2']

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check project exists
        id: check-project
        env:
          PROJECT_PATH: ${{ matrix.project }}
        run: |
          if [ -d "$PROJECT_PATH" ]; then
            echo "project_exists=1" >> "$GITHUB_OUTPUT"
          else
            echo "project_exists=0" >> "$GITHUB_OUTPUT"
          fi

      - name: 🐘 Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, zip
          tools: composer:v2

      - name: 📋 Validate composer.json
        run: composer validate --strict

      - name: 🗂️ Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 🚀 Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 🔧 Install Composer Dependencies
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: 🧹 PHP-CS-Fixer Code Style Check
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
        continue-on-error: true

      - name: 🔍 PHPStan Static Analysis (Level 8)
        run: ./vendor/bin/phpstan analyse --level=8 --memory-limit=2G
        continue-on-error: true

      - name: 🧪 PHPUnit Tests
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
        continue-on-error: true

      - name: 📊 Upload PHP Coverage
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: php

  # ============================================================================
  # DOCKER BUILD TESTING
  # ============================================================================
  docker-build:
    name: 🐳 Docker Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: 'mcp-essential'
            path: './mcp-servers/essential-stack'
            dockerfile: 'Dockerfile'
      fail-fast: false

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check docker context exists
        id: check-service
        env:
          SERVICE_PATH: ${{ matrix.service.path }}
        run: |
          if [ -d "$SERVICE_PATH" ]; then
            echo "service_exists=1" >> "$GITHUB_OUTPUT"
          else
            echo "service_exists=0" >> "$GITHUB_OUTPUT"
          fi

      - name: 🏗️ Build Docker Image - ${{ matrix.service.name }}
        if: ${{ steps.check-service.outputs.service_exists == '1' }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          file: ${{ matrix.service.path }}/${{ matrix.service.dockerfile }}
          push: false
          tags: ${{ matrix.service.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Skip note (docker context missing)
        if: ${{ steps.check-service.outputs.service_exists == '0' }}
        run: |
          echo "Skip: ${{ matrix.service.path }} not present; Docker build skipped."

      - name: 🔍 Test Docker Image
        run: |
          docker run --rm ${{ matrix.service.name }}:latest --version || echo "Version check completed"

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: 🛡️ Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 npm Security Audit
        run: |
          find . -name "package.json" -not -path "./node_modules/*" -exec dirname {} \; | while read dir; do
            echo "🔍 Scanning $dir"
            cd "$dir" && npm audit --audit-level=high || echo "Vulnerabilities found in $dir"
            cd - > /dev/null
          done
        continue-on-error: true

      - name: 🐍 Python Safety Check
        run: |
          pip install safety
          find . -name "requirements.txt" -o -name "pyproject.toml" | while read file; do
            echo "🔍 Safety check for $file"
            if [[ $file == *"requirements.txt" ]]; then
              safety check -r "$file" || echo "Vulnerabilities found in $file"
            fi
          done
        continue-on-error: true

      - name: 🐘 PHP Security Advisories
        run: |
          if [ -f "composer.lock" ]; then
            curl -sSL https://get.sensiolabs.org/security-checker.phar -o security-checker.phar
          php security-checker.phar security:check composer.lock || echo "Security issues found"
          fi

  # ============================================================================
  # FRONTEND (React/Tailwind) + WEBSITE (Static) LIGHTHOUSE
  # ============================================================================
  web-audit:
    name: 🌐 Frontend & Website Audits
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install Dependencies (root workspaces)
        run: npm ci

      - name: 🎨 Build Design Tokens
        run: npm run tokens:build --workspace=frontend

      - name: 🏗️ Build Frontend
        run: npm run build --workspace=frontend

      - name: 🔎 Lighthouse (Frontend)
        run: npm run lh:ci --workspace=frontend

      - name: 🔎 Lighthouse (Website)
        run: npm run lh:ci --workspace=website
        continue-on-error: true

  # ============================================================================
  # CODE QUALITY METRICS
  # ============================================================================
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run ESLint with SARIF output
        run: |
          npm install -g eslint @microsoft/eslint-formatter-sarif
          find . -name "*.js" -o -name "*.ts" | head -100 | xargs eslint --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || true
        continue-on-error: true

      - name: 📤 Upload ESLint SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: eslint-results.sarif
        continue-on-error: true

  # ============================================================================
  # DEPLOYMENT READINESS
  # ============================================================================
  deployment-check:
    name: 🚀 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-typescript, test-python, test-php, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: ✅ Deployment Ready
        run: |
          echo "🎉 All checks passed! Repository is ready for deployment."
          echo "📊 Summary:"
          echo "  ✅ TypeScript/JavaScript tests passed"
          echo "  ✅ Python tests passed"
          echo "  ✅ PHP tests passed"
          echo "  ✅ Docker builds successful"
          echo "  ✅ Security scans completed"

      - name: 🏷️ Create Release Tag (on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Creating automatic release tag..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TAG_NAME="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          git tag -a "$TAG_NAME" -m "Automated release $TAG_NAME"
          git push origin "$TAG_NAME" || echo "Tag push failed (might already exist)"
        continue-on-error: true
