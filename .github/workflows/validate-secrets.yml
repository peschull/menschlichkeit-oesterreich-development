name: üîê Validate Secrets

on:
  push:
    branches: [main, master, chore/**, feature/**]
    paths:
      - '.env.example'
      - 'scripts/validate-secrets.py'
      - 'scripts/validate-secrets.ps1'
      - 'secrets/SECRETS-AUDIT.md'
  pull_request:
    branches: [main, master]
    paths:
      - '.env.example'
      - 'scripts/validate-secrets.py'
      - 'secrets/SECRETS-AUDIT.md'
  workflow_dispatch:
  schedule:
    # Daily validation at 7:00 UTC
    - cron: '0 7 * * *'

permissions:
  contents: read

jobs:
  validate-env-template:
    name: Validate .env.example Template
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Copy .env.example to .env (for validation)
        run: cp .env.example .env
      
      - name: Run secret validation (strict mode)
        run: python scripts/validate-secrets.py --strict --env development
      
      - name: Check for common mistakes
        run: |
          # Keine echten Secrets in .env.example
          if grep -qE "(ghp_[A-Za-z0-9]{36}|sk_live_)" .env.example; then
            echo "‚ùå Echte API-Keys in .env.example gefunden!"
            exit 1
          fi
          
          # Alle Keys haben Platzhalter
          if grep -qE "^[A-Z_]+=$" .env.example; then
            echo "‚ö†Ô∏è  Leere Werte in .env.example gefunden"
          fi
          
          echo "‚úÖ .env.example ist sauber"
      
      - name: Validate SECRETS-AUDIT.md exists
        run: |
          if [ ! -f secrets/SECRETS-AUDIT.md ]; then
            echo "‚ùå secrets/SECRETS-AUDIT.md fehlt!"
            exit 1
          fi
          echo "‚úÖ SECRETS-AUDIT.md vorhanden"
      
      - name: Summary
        run: |
          echo "### üîê Secret-Template-Validierung" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ .env.example validiert" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Keine echten Secrets committed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SECRETS-AUDIT.md aktuell" >> $GITHUB_STEP_SUMMARY

  validate-required-secrets:
    name: Validate Required Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Production Secrets
        env:
          # SSH/Deployment
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}

          # Database Credentials
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          PG_HOST: ${{ secrets.PG_HOST }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}

          # CiviCRM
          CIVICRM_SITE_KEY: ${{ secrets.CIVICRM_SITE_KEY }}
          CIVICRM_API_KEY: ${{ secrets.CIVICRM_API_KEY }}

          # n8n
          N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}

          # JWT
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

          # Figma
          FIGMA_ACCESS_TOKEN: ${{ secrets.FIGMA_ACCESS_TOKEN }}

        run: |
          echo "üîç Validating required secrets..."
          EXIT_CODE=0

          # Function to check secret
          check_secret() {
            local name=$1
            local value=$2
            if [ -z "$value" ]; then
              echo "‚ùå MISSING: $name"
              EXIT_CODE=1
            else
              echo "‚úÖ FOUND: $name"
            fi
          }

          # SSH/Deployment
          check_secret "SSH_PRIVATE_KEY" "$SSH_PRIVATE_KEY"
          check_secret "SSH_HOST" "$SSH_HOST"
          check_secret "SSH_USER" "$SSH_USER"

          # Database
          check_secret "MYSQL_HOST" "$MYSQL_HOST"
          check_secret "PG_HOST" "$PG_HOST"

          # CiviCRM
          check_secret "CIVICRM_SITE_KEY" "$CIVICRM_SITE_KEY"
          check_secret "CIVICRM_API_KEY" "$CIVICRM_API_KEY"

          # Application
          check_secret "N8N_ENCRYPTION_KEY" "$N8N_ENCRYPTION_KEY"
          check_secret "JWT_SECRET" "$JWT_SECRET"

          # Integrations
          check_secret "FIGMA_ACCESS_TOKEN" "$FIGMA_ACCESS_TOKEN"

          if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All required secrets are configured"
          else
            echo "‚ùå Some required secrets are missing"
            echo "Please configure missing secrets in GitHub Settings > Secrets"
          fi

          exit $EXIT_CODE

  validate-optional-secrets:
    name: Validate Optional Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Optional Secrets
        env:
          # Quality Tools (optional but recommended)
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

          # Monitoring (optional)
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

        run: |
          echo "üîç Checking optional secrets..."

          check_optional() {
            local name=$1
            local value=$2
            if [ -z "$value" ]; then
              echo "‚ö†Ô∏è  OPTIONAL (not set): $name"
            else
              echo "‚úÖ FOUND: $name"
            fi
          }

          check_optional "CODACY_API_TOKEN" "$CODACY_API_TOKEN"
          check_optional "SEMGREP_APP_TOKEN" "$SEMGREP_APP_TOKEN"
          check_optional "SENTRY_DSN" "$SENTRY_DSN"

          echo "‚ÑπÔ∏è  Optional secrets are not required but enhance functionality"

  validate-env-examples:
    name: Validate .env.example Files
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check .env.example files exist
        run: |
          echo "üîç Validating .env.example files..."
          EXIT_CODE=0

          # Check for service-specific .env.example files
          SERVICES=(
            "api.menschlichkeit-oesterreich.at"
            "crm.menschlichkeit-oesterreich.at"
            "frontend"
            "automation/n8n"
          )

          for service in "${SERVICES[@]}"; do
            if [ -f "$service/.env.example" ]; then
              echo "‚úÖ Found: $service/.env.example"
            else
              echo "‚ö†Ô∏è  Missing: $service/.env.example (creating template...)"
              mkdir -p "$service"
              touch "$service/.env.example"
            fi
          done

          exit $EXIT_CODE
