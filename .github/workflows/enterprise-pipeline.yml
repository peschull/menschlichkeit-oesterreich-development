name: 🔄 CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip Tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.4'
  PYTHON_VERSION: '3.11'

jobs:
  # ===============================
  # WORKSPACE SETUP & VALIDATION
  # ===============================
  setup:
    name: 🔧 Workspace Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect-changes.outputs.matrix }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: detect-changes
        run: |
          echo "matrix={\"include\":[" >> $GITHUB_OUTPUT
          if git diff --name-only HEAD~1 | grep -E "^frontend/|^figma-design-system/" || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "{\"service\":\"frontend\",\"path\":\"frontend/\",\"port\":\"3000\"}," >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 | grep -E "^api\.|^requirements\.txt" || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "{\"service\":\"api\",\"path\":\"api.menschlichkeit-oesterreich.at/\",\"port\":\"8001\"}," >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 | grep -E "^crm\.|^composer\.json" || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "{\"service\":\"crm\",\"path\":\"crm.menschlichkeit-oesterreich.at/\",\"port\":\"8000\"}," >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 | grep -E "^web/games|^web/themes" || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "{\"service\":\"games\",\"path\":\"web/\",\"port\":\"3001\"}," >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 | grep -E "^website/" || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "{\"service\":\"website\",\"path\":\"website/\",\"port\":\"8080\"}," >> $GITHUB_OUTPUT
          fi
          if git diff --name-only HEAD~1 | grep -E "^automation/n8n/" || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "{\"service\":\"n8n\",\"path\":\"automation/n8n/\",\"port\":\"5678\"}," >> $GITHUB_OUTPUT
          fi
          echo "]}" >> $GITHUB_OUTPUT
          sed -i 's/,]/]/' $GITHUB_OUTPUT

  # ===============================
  # QUALITY GATES - STAGE 1
  # ===============================
  quality-gates:
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.matrix != '{"include":[]}'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 💅 Prettier Check
        run: npm run format:check

      - name: 🔍 ESLint Analysis  
        run: npm run lint

      - name: 🔧 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json

      - name: 📦 Install PHP Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: 🔍 PHPStan Analysis
        run: vendor/bin/phpstan analyse --no-progress

      - name: 🔒 Security Check - Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===============================
  # TESTING STAGE
  # ===============================
  testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: [setup, quality-gates]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}package.json

      - name: 📦 Install Dependencies - ${{ matrix.service }}
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      - name: 🧪 Unit Tests - ${{ matrix.service }}
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f package.json ] && grep -q '"test"' package.json; then
            npm test -- --coverage
          fi

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ${{ matrix.path }}
          flags: ${{ matrix.service }}

  # ===============================
  # SECURITY SCANNING  
  # ===============================
  security-scan:
    name: 🔐 Security Analysis
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      security-events: write

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔒 Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python, php

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔬 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🕵️ Secret Scanning
        run: |
          echo "Checking for accidentally committed secrets..."
          if grep -r "password.*=" . --exclude-dir=node_modules --exclude-dir=.git || \
             grep -r "api[_-]key.*=" . --exclude-dir=node_modules --exclude-dir=.git || \
             grep -r "secret.*=" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential secrets found!"
            exit 1
          else
            echo "✅ No secrets detected"
          fi

  # ===============================
  # CODACY ANALYSIS
  # ===============================
  codacy-analysis:
    name: 📊 Codacy Quality Analysis
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          api-token: ${{ secrets.CODACY_API_TOKEN }}
          upload: true
          max-allowed-issues: 50

  # ===============================
  # PERFORMANCE TESTING
  # ===============================
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [setup, testing]
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application - ${{ matrix.service }}
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f package.json ] && grep -q '"build"' package.json; then
            npm run build
          fi

      - name: 🚀 Start Test Server
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f package.json ] && grep -q '"start"' package.json; then
            npm start &
            sleep 30
          fi

      - name: 🔬 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.cjs'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ===============================
  # E2E TESTING  
  # ===============================
  e2e-testing:
    name: 🎭 E2E Testing (Playwright)
    runs-on: ubuntu-latest
    needs: [setup, testing]
    if: github.event.inputs.skip_tests != 'true'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Start All Services
        run: |
          npm run dev:all &
          sleep 60

      - name: 🧪 Run E2E Tests
        run: npx playwright test

      - name: 📊 Upload E2E Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: playwright-results/

  # ===============================
  # BUILD & PACKAGE
  # ===============================  
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies - ${{ matrix.service }}
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      - name: 🏗️ Build - ${{ matrix.service }}
        working-directory: ${{ matrix.path }}
        run: |
          if [ -f package.json ] && grep -q '"build"' package.json; then
            npm run build
          fi

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: ${{ matrix.path }}dist/
          retention-days: 7

  # ===============================
  # STAGING DEPLOYMENT
  # ===============================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance, e2e-testing]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./builds

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to Staging Server
        run: |
          echo "Deploying to staging..."
          ./deployment-scripts/deploy-api-plesk.sh staging
          ./deployment-scripts/deploy-crm-plesk.sh staging

      - name: 🔍 Health Check - Staging
        run: |
          ./scripts/test-deployment.sh staging

  # ===============================
  # PRODUCTION DEPLOYMENT
  # ===============================
  deploy-production:
    name: 🏆 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance, e2e-testing]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts  
        uses: actions/download-artifact@v4
        with:
          path: ./builds

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to Production Server
        run: |
          echo "Deploying to production..."
          ./deployment-scripts/deploy-api-plesk.sh production
          ./deployment-scripts/deploy-crm-plesk.sh production

      - name: 🔍 Health Check - Production
        run: |
          ./scripts/test-deployment.sh production

      - name: 📊 Post-Deployment Monitoring
        run: |
          echo "Starting post-deployment monitoring..."
          ./scripts/production-readiness-validator.py

  # ===============================
  # NOTIFICATIONS & REPORTING
  # ===============================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📧 Notify Success
        if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          curl -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "success",
              "environment": "${{ github.event.inputs.environment || 'auto' }}",
              "commit": "${{ github.sha }}",
              "actor": "${{ github.actor }}"
            }'

      - name: 🚨 Notify Failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          curl -X POST "${{ secrets.N8N_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "failed",
              "environment": "${{ github.event.inputs.environment || 'auto' }}",
              "commit": "${{ github.sha }}",
              "actor": "${{ github.actor }}"
            }'