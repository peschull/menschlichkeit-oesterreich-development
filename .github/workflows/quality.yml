name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  eslint:
    name: ESLint (SARIF)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Geänderte Dateien erkennen
        id: changes
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            js:
              - '**/*.js'
              - '**/*.mjs'
              - '**/*.cjs'
              - '**/*.ts'
              - '**/*.tsx'
              - 'package.json'
              - 'package-lock.json'
              - 'pnpm-lock.yaml'
              - 'yarn.lock'
              - 'eslint.config.*'
              - '.eslintrc*'

      - name: Skip wenn nichts Relevantes geändert (außer Dispatch)
        if: github.event_name != 'workflow_dispatch' && steps.changes.outputs.js == '[]'
        run: echo "Keine relevanten Änderungen — übersprungen."

      - name: Package-Manager erkennen
        id: pm
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          PM="npm"
          LOCK=""
          if [[ -f package.json ]]; then
            if node -e "try{console.log((require('./package.json').packageManager||'').split('@')[0])}catch(e){process.exit(1)}" >/dev/null 2>&1; then
              PM=$(node -e "try{console.log((require('./package.json').packageManager||'').split('@')[0])}catch(e){console.log('npm')}")
            fi
          fi
          if [[ -f pnpm-lock.yaml ]]; then PM="pnpm"; LOCK="pnpm-lock.yaml"; fi
          if [[ -f yarn.lock ]]; then PM="yarn"; LOCK="yarn.lock"; fi
          if [[ -f package-lock.json ]]; then LOCK="package-lock.json"; fi
          echo "pm=$PM" >> "$GITHUB_OUTPUT"
          echo "lock=$LOCK" >> "$GITHUB_OUTPUT"
          echo "Package-Manager: $PM, Lockfile: ${LOCK:-none}"

      - name: Node einrichten (mit Cache)
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      - name: Versionen & PM protokollieren
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          echo "PM=${{ steps.pm.outputs.pm }}, LOCK=${{ steps.pm.outputs.lock }}"
          node -v
          npm -v || true
          npx -v || true

      - name: Abhängigkeiten installieren (erzwungen)
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.pm.outputs.pm }}" in
            pnpm) pnpm install --frozen-lockfile ;;
            yarn) yarn install --frozen-lockfile ;;
            *) npm ci --no-audit --no-fund ;;
          esac

      - name: Corepack aktivieren (yarn/pnpm)
        if: (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') && (steps.pm.outputs.pm == 'yarn' || steps.pm.outputs.pm == 'pnpm')
        run: corepack enable

      - name: Abhängigkeiten installieren (frozen)
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.pm.outputs.pm }}" in
            pnpm) pnpm install --frozen-lockfile ;;
            yarn) yarn install --frozen-lockfile ;;
            *) npm ci --no-audit --no-fund ;;
          esac

      - name: Versionen & PM protokollieren
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          echo "Node: $(node -v || true)"
          echo "npm: $(npm -v || true)"
          echo "yarn: $(yarn -v || true)"
          echo "pnpm: $(pnpm -v || true)"

      - name: (Pseudo-)Cache-Status
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          if [[ -d node_modules ]]; then
            echo "node_modules existiert (möglicher Cache-Treffer nach Install)."
            ls -1 node_modules | wc -l | xargs echo "Pakete (Top-Level):"
          else
            echo "node_modules fehlt (kein Cache oder frischer Install)."
          fi

      - name: ESLint-Konfiguration prüfen
        id: detect
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          HAS=false
          for f in eslint.config.js eslint.config.cjs .eslintrc .eslintrc.js .eslintrc.cjs .eslintrc.json .eslintrc.yaml .eslintrc.yml; do
            [[ -f "$f" ]] && HAS=true
          done
          echo "has_eslint=$HAS" >> "$GITHUB_OUTPUT"
          echo "ESLint config vorhanden: $HAS"

      - name: ESLint (SARIF erzeugen)
        if: (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') && steps.detect.outputs.has_eslint == 'true'
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          echo "Starte ESLint (SARIF) via npm script..."
          npm run -s lint:sarif || true

      - name: SARIF vorhanden?
        id: sarif
        if: (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') && steps.detect.outputs.has_eslint == 'true'
        shell: bash
        run: |
          if [[ -s "eslint.sarif" ]]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: SARIF zu Code Scanning hochladen
        if: |
          (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') &&
          steps.detect.outputs.has_eslint == 'true' &&
          steps.sarif.outputs.exists == 'true' &&
          (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint.sarif

      - name: Zusammenfassung
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          {
            echo "## Code Quality Ergebnis"
            echo ""
            echo "- Package-Manager: **${{ steps.pm.outputs.pm }}**"
            echo "- Lockfile: **${{ steps.pm.outputs.lock }}**"
            echo "- Geänderte Dateien:"
            echo '```json'
            echo "${{ steps.changes.outputs.js }}"
            echo '```'
            echo "- ESLint-Konfig gefunden: **${{ steps.detect.outputs.has_eslint }}**"
            echo "- SARIF erstellt: **$( [[ -f eslint.sarif ]] && echo 'Ja' || echo 'Nein' )**"
          } >> "$GITHUB_STEP_SUMMARY"
name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  eslint:
    name: ESLint (SARIF)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Geänderte Dateien erkennen
        id: changes
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            js:
              - '**/*.js'
              - '**/*.mjs'
              - '**/*.cjs'
              - '**/*.ts'
              - '**/*.tsx'
              - 'package.json'
              - 'package-lock.json'
              - 'pnpm-lock.yaml'
              - 'yarn.lock'
              - 'eslint.config.*'
              - '.eslintrc*'

      - name: Skip wenn nichts Relevantes geändert (außer Dispatch)
        if: github.event_name != 'workflow_dispatch' && steps.changes.outputs.js == '[]'
        run: echo "Keine relevanten Änderungen — übersprungen."

      - name: Package-Manager erkennen
        id: pm
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          PM="npm"
          LOCK=""
          if [[ -f package.json ]]; then
            if node -e "try{console.log((require('./package.json').packageManager||'').split('@')[0])}catch(e){process.exit(1)}" >/dev/null 2>&1; then
              PM=$(node -e "try{console.log((require('./package.json').packageManager||'').split('@')[0])}catch(e){console.log('npm')}")
            fi
          fi
          if [[ -f pnpm-lock.yaml ]]; then PM="pnpm"; LOCK="pnpm-lock.yaml"; fi
          if [[ -f yarn.lock ]]; then PM="yarn"; LOCK="yarn.lock"; fi
          if [[ -f package-lock.json ]]; then LOCK="package-lock.json"; fi
          echo "pm=$PM" >> "$GITHUB_OUTPUT"
          echo "lock=$LOCK" >> "$GITHUB_OUTPUT"
          echo "Package-Manager: $PM, Lockfile: ${LOCK:-none}"

      - name: Node einrichten (mit Cache)
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      - name: Corepack aktivieren (yarn/pnpm)
        if: (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') && (steps.pm.outputs.pm == 'yarn' || steps.pm.outputs.pm == 'pnpm')
        run: corepack enable

      - name: Abhängigkeiten installieren (frozen)
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.pm.outputs.pm }}" in
            pnpm) pnpm install --frozen-lockfile ;;
            yarn) yarn install --frozen-lockfile ;;
            *) npm ci --no-audit --no-fund ;;
          esac

      - name: ESLint-Konfiguration prüfen
        id: detect
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          set -euo pipefail
          HAS=false
          for f in eslint.config.js eslint.config.cjs .eslintrc .eslintrc.js .eslintrc.cjs .eslintrc.json .eslintrc.yaml .eslintrc.yml; do
            [[ -f "$f" ]] && HAS=true
          done
          echo "has_eslint=$HAS" >> "$GITHUB_OUTPUT"
          echo "ESLint config vorhanden: $HAS"

      - name: ESLint (SARIF erzeugen)
        if: (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') && steps.detect.outputs.has_eslint == 'true'
        continue-on-error: true
        run: npx eslint . -f sarif -o eslint.sarif

      - name: SARIF vorhanden?
        id: sarif
        if: (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') && steps.detect.outputs.has_eslint == 'true'
        shell: bash
        run: |
          if [[ -s "eslint.sarif" ]]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: SARIF zu Code Scanning hochladen
        if: |
          (github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]') &&
          steps.detect.outputs.has_eslint == 'true' &&
          steps.sarif.outputs.exists == 'true' &&
          (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint.sarif

      - name: Zusammenfassung
        if: github.event_name == 'workflow_dispatch' || steps.changes.outputs.js != '[]'
        shell: bash
        run: |
          {
            echo "## Code Quality Ergebnis"
            echo ""
            echo "- Package-Manager: **${{ steps.pm.outputs.pm }}**"
            echo "- ESLint-Konfig gefunden: **${{ steps.detect.outputs.has_eslint }}**"
            echo "- SARIF Upload: **$( [[ -f eslint.sarif ]] && echo 'Ja' || echo 'Nein' )**"
          } >> "$GITHUB_STEP_SUMMARY"
