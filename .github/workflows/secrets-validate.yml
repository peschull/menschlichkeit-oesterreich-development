name: Secrets Validation

on:
  pull_request:
    paths:
      - 'secrets.manifest.json'
      - '.github/workflows/secrets-validate.yml'
      - 'scripts/validate-pr.ps1'
      - 'scripts/setup-github-secrets.ps1'
      - '.codacy/codacy.yaml'
  push:
    branches:
      - main
      - 'copilot/**'
    paths:
      - 'secrets.manifest.json'
      - '.codacy/codacy.yaml'

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    environment: stage
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup PowerShell
        shell: bash
        run: |
          # Install PowerShell on Ubuntu
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
      
      - name: Validate Secrets Manifest
        shell: pwsh
        run: |
          Write-Host "üîê Validating secrets.manifest.json..." -ForegroundColor Cyan
          
          if (-not (Test-Path "secrets.manifest.json")) {
            Write-Host "‚ùå secrets.manifest.json not found!" -ForegroundColor Red
            exit 1
          }
          
          try {
            $manifest = Get-Content "secrets.manifest.json" -Raw | ConvertFrom-Json
            
            # Validate required fields
            $requiredFields = @('version', 'environment', 'secrets', 'updated_at')
            $missing = $requiredFields | Where-Object { -not $manifest.PSObject.Properties.Name.Contains($_) }
            
            if ($missing.Count -gt 0) {
              Write-Host "‚ùå Missing fields: $($missing -join ', ')" -ForegroundColor Red
              exit 1
            }
            
            # Validate secrets structure
            foreach ($secret in $manifest.secrets) {
              if (-not $secret.name) {
                Write-Host "‚ùå Secret missing 'name' field" -ForegroundColor Red
                exit 1
              }
              if (-not $secret.category) {
                Write-Host "‚ùå Secret '$($secret.name)' missing 'category' field" -ForegroundColor Red
                exit 1
              }
            }
            
            Write-Host "‚úÖ Secrets manifest is valid" -ForegroundColor Green
            Write-Host "  Version: $($manifest.version)" -ForegroundColor Gray
            Write-Host "  Environment: $($manifest.environment)" -ForegroundColor Gray
            Write-Host "  Secrets count: $($manifest.secrets.Count)" -ForegroundColor Gray
            
          } catch {
            Write-Host "‚ùå JSON parsing error: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }
      
      - name: Validate Codacy Configuration
        shell: bash
        run: |
          echo "üìä Validating Codacy configuration..."
          
          if [ ! -f ".codacy/codacy.yaml" ]; then
            echo "‚ùå .codacy/codacy.yaml not found!"
            exit 1
          fi
          
          # Check YAML indentation (2 spaces)
          if grep -P '^\t' .codacy/codacy.yaml; then
            echo "‚ùå Tabs found in YAML! Use 2 spaces for indentation."
            exit 1
          fi
          
          # Check for odd number of spaces in indentation
          if grep -P '^(\s{1}|\s{3}|\s{5}|\s{7}|\s{9})(\S)' .codacy/codacy.yaml; then
            echo "‚ùå Odd number of spaces found! Use 2-space indentation."
            exit 1
          fi
          
          echo "‚úÖ Codacy configuration valid (2-space indentation)"
      
      - name: Check for merge conflicts
        shell: bash
        run: |
          echo "üîÄ Checking for merge conflicts..."
          
          conflict_files=$(git ls-files -u | cut -f 2 | sort -u)
          
          if [ -n "$conflict_files" ]; then
            echo "‚ùå Merge conflicts detected in:"
            echo "$conflict_files"
            exit 1
          fi
          
          # Check for conflict markers in critical files
          markers_found=0
          for pattern in '.github/workflows/*.yml' 'package.json' 'docs/archive/*'; do
            if find . -path "$pattern" -type f -exec grep -l '<<<<<<<\|=======\|>>>>>>>' {} \; 2>/dev/null | grep -q .; then
              echo "‚ùå Conflict markers found in $pattern files"
              markers_found=1
            fi
          done
          
          if [ $markers_found -eq 1 ]; then
            exit 1
          fi
          
          echo "‚úÖ No merge conflicts detected"
      
      - name: Run PowerShell validation script
        shell: pwsh
        run: |
          ./scripts/validate-pr.ps1 -Environment stage -PullRequestNumber ${{ github.event.pull_request.number || 87 }} -DryRun
      
      - name: Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-logs-${{ github.run_number }}
          path: |
            logs/**/*.txt
            logs/**/*.log
          retention-days: 30
      
      - name: Comment on PR (if validation failed)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentPath = '.github/prompts/review-comment.md';
            
            let comment = '## ‚ùå Validation Failed\n\n';
            comment += 'The automated validation checks have failed. Please review the logs and fix the issues.\n\n';
            comment += '### Failed Checks\n';
            comment += '- Secrets manifest validation\n';
            comment += '- Codacy configuration\n';
            comment += '- Merge conflict detection\n\n';
            comment += '### Next Steps\n';
            comment += '1. Check the workflow logs for details\n';
            comment += '2. Fix the identified issues\n';
            comment += '3. Push the fixes to trigger re-validation\n';
            
            if (fs.existsSync(commentPath)) {
              const template = fs.readFileSync(commentPath, 'utf8');
              comment = template.replace('{{status}}', 'failed')
                               .replace('{{checks}}', 'See workflow logs')
                               .replace('{{timestamp}}', new Date().toISOString());
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
