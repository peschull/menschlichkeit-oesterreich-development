name: Configure Branch Protection

on:
  workflow_dispatch:
    inputs:
      branches:
        description: "Kommagetrennte Branches (z. B. main,chore/figma-mcp-make)"
        required: true
        default: "main"
  schedule:
    - cron: '17 3 * * *' # täglich 03:17 UTC

jobs:
  protect:
    runs-on: ubuntu-latest
    steps:
      - name: Compute owner/repo and branches
        id: vars
        env:
          GITHUB_API: https://api.github.com
          INPUT_BRANCHES: ${{ github.event.inputs.branches }}
          EVENT_NAME: ${{ github.event_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER_REPO="${GITHUB_REPOSITORY}"
          OWNER="${OWNER_REPO%/*}"; REPO="${OWNER_REPO#*/}"
          # Standard: main + alle release/* Branches automatisch
          # entdecken (für schedule)
          BRANCHES=""
          if [ "$EVENT_NAME" = "workflow_dispatch" ] && \
             [ -n "${INPUT_BRANCHES}" ]; then
            BRANCHES="$INPUT_BRANCHES"
          else
            echo "Ermittle release/* Branches..."
            # Stelle sicher, dass jq vorhanden ist
            if ! command -v jq >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y jq >/dev/null
            fi
            RELEASES=$(curl -sS \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "${GITHUB_API}/repos/${OWNER}/${REPO}/branches?per_page=100" \
              | jq -r '.[].name' | awk '/^release\// {print}')
            BRANCHES="main"
            if [ -n "$RELEASES" ]; then
              BRANCHES+="$(printf ',%s' ${RELEASES})"
            fi
          fi
          echo "owner_repo=${OWNER_REPO}" >> $GITHUB_OUTPUT
          echo "branches=${BRANCHES}" >> $GITHUB_OUTPUT

      - name: Configure required checks via REST API
        env:
          OWNER_REPO: ${{ steps.vars.outputs.owner_repo }}
          BRANCHES: ${{ steps.vars.outputs.branches }}
          # Secret token with repo admin scope; set one of these in repository secrets
          TOKEN_1: ${{ secrets.GH_ADMIN_TOKEN }}
          TOKEN_2: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          TOKEN_3: ${{ secrets.REPO_ADMIN_TOKEN }}
          GITHUB_API: https://api.github.com
        run: |
          set -euo pipefail
          TOKEN="${TOKEN_1:-${TOKEN_2:-${TOKEN_3:-}}}"
          if [ -z "$TOKEN" ]; then
            echo "::error::Kein Admin-Token in Secrets gefunden"
            echo "(GH_ADMIN_TOKEN/ADMIN_GITHUB_TOKEN/REPO_ADMIN_TOKEN)"
            exit 1
          fi
          OWNER="${OWNER_REPO%/*}"; REPO="${OWNER_REPO#*/}";
          IFS=',' read -ra BR_LIST <<< "$BRANCHES"
          read -r -d '' BODY <<'JSON' || true
          {
            "required_status_checks": {
              "strict": true,
              "contexts": [
                "Phase 0 Verification",
                "verify-phase-0",
                "Generate SBOMs",
                "sbom",
                "Docs Lint & ADR Index",
                "docs",
                "API OpenAPI Export",
                "export-openapi"
              ]
            },
            "enforce_admins": true,
            "required_pull_request_reviews": null,
            "restrictions": null
          }
          JSON
          for BR in "${BR_LIST[@]}"; do
            BR_TRIM=$(echo "$BR" | xargs)
            echo "Konfiguriere Required Checks für"
            echo "$OWNER/$REPO@$BR_TRIM..."
            curl -sS -X PUT \
              -H "Authorization: Bearer ${TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "${GITHUB_API}/repos/${OWNER}/${REPO}/branches/${BR_TRIM}/protection" \
              -d "$BODY" | { jq '.message? // "ok"' 2>/dev/null || cat; }
          done
