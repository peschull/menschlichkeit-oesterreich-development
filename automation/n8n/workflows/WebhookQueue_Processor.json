{
  "name": "WebhookQueue_Processor",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "queue/webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-in",
      "name": "Webhook - Inbound",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [220, 260],
      "webhookId": "moe-queue-webhook"
    },
    {
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "api-base",
              "name": "API_BASE",
              "value": "={{ $env.MOE_API_URL || 'http://host.docker.internal:8000' }}",
              "type": "string"
            },
            {
              "id": "max-attempts",
              "name": "MAX_ATTEMPTS",
              "value": 5,
              "type": "number"
            }
          ]
        }
      },
      "id": "set-env",
      "name": "Set Env Defaults",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [440, 260]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Env Defaults').item.json.API_BASE }}/queue/push",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MOE_API_TOKEN }}"
            },
            {
              "name": "Idempotency-Key",
              "value": "={{ $json.id || $json.eventId || $json.messageId || $json.trxn_id || $json._id || $json.requestId || $json['x-request-id'] || $json.ts }}"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": true,
        "bodyParametersJson": "={{ { payload: $('Webhook - Inbound').item.json, max_attempts: $('Set Env Defaults').item.json.MAX_ATTEMPTS } }}",
        "options": {}
      },
      "id": "enqueue",
      "name": "Enqueue",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 260]
    },
    {
      "parameters": {
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 260]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "id": "cron",
      "name": "Cron Worker",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1.1,
      "position": [220, 520]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Env Defaults').item.json.API_BASE }}/queue/pop",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MOE_API_TOKEN }}"
            }
          ]
        },
        "options": {}
      },
      "id": "pop",
      "name": "Pop",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [440, 520]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-item",
              "leftValue": "={{ $json.data }}",
              "operator": {
                "type": "isEmpty",
                "operation": "isEmpty"
              },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-empty",
      "name": "Empty?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [640, 520]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Env Defaults').item.json.API_BASE }}/civicrm",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MOE_API_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": true,
        "bodyParametersJson": "={{ $json.data.payload }}",
        "options": {}
      },
      "id": "process",
      "name": "Process → APIv4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [840, 640]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Env Defaults').item.json.API_BASE }}/queue/ack",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MOE_API_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": true,
        "bodyParametersJson": "={{ { id: $json.data.id } }}"
      },
      "id": "ack",
      "name": "Ack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 640]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Env Defaults').item.json.API_BASE }}/queue/fail",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MOE_API_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": true,
        "bodyParametersJson": "={{ { id: $json.data.id, error: $json.error?.message || 'worker-failed' } }}"
      },
      "id": "fail",
      "name": "Fail → Backoff/DLQ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1060, 760]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Inbound": {
      "main": [
        [
          {
            "node": "Set Env Defaults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Env Defaults": {
      "main": [
        [
          {
            "node": "Enqueue",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enqueue": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron Worker": {
      "main": [
        [
          {
            "node": "Set Env Defaults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pop": {
      "main": [
        [
          {
            "node": "Empty?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty?": {
      "main": [
        [
          {
            "node": "Process → APIv4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Process → APIv4": {
      "main": [
        [
          {
            "node": "Ack",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fail → Backoff/DLQ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "meta": {
    "templateCredsSetup": []
  },
  "id": "moe-webhook-queue-processor"
}
