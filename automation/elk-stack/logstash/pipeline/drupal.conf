#############################################################################
# Logstash Pipeline: Drupal/CiviCRM Logs
# Purpose: Process Syslog from Drupal (already PII-sanitized via Phase 2)
#############################################################################

input {
  pipeline {
    address => "drupal"
  }
}

#############################################################################
# FILTER: Parse Syslog + Extract Drupal Fields
#############################################################################
filter {
  # Grok Pattern for Drupal Syslog
  grok {
    match => {
      "message" => "<%{NUMBER:syslog_pri}>%{NUMBER:syslog_ver} %{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:hostname} %{WORD:app_name} %{NUMBER:process_id} - - \[%{WORD:drupal_module}\] %{GREEDYDATA:log_message}"
    }
    tag_on_failure => ["_grokparsefailure"]
  }
  
  # Extract Service from hostname
  if [hostname] =~ /crm\./ {
    mutate { add_field => { "service" => "drupal-civicrm" } }
  }
  else {
    mutate { add_field => { "service" => "drupal" } }
  }
  
  # Parse Log Level from syslog_pri
  ruby {
    code => '
      pri = event.get("syslog_pri").to_i
      severity = pri % 8
      level_map = {
        0 => "EMERGENCY",
        1 => "ALERT",
        2 => "CRITICAL",
        3 => "ERROR",
        4 => "WARNING",
        5 => "NOTICE",
        6 => "INFO",
        7 => "DEBUG"
      }
      event.set("level", level_map[severity] || "UNKNOWN")
    '
  }
  
  # Validate PII Sanitization (double-check for bypass)
  # NOTE: Drupal logs SHOULD be sanitized by pii_sanitizer module
  if [log_message] =~ /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/ {
    mutate {
      add_tag => ["pii_bypass_detected"]
      add_field => {
        "pii_bypass_type" => "email"
        "pii_bypass_severity" => "CRITICAL"
        "pii_bypass_source" => "drupal"
      }
    }
  }
  
  # Check for card numbers
  if [log_message] =~ /\b(?:\d{4}[\s-]?){3}\d{4}\b/ {
    mutate {
      add_tag => ["pii_bypass_detected"]
      add_field => {
        "pii_bypass_type" => "card"
        "pii_bypass_severity" => "CRITICAL"
      }
    }
  }
  
  # Environment Detection
  if "stg" in [hostname] or "staging" in [hostname] {
    mutate { add_field => { "environment" => "staging" } }
  }
  else {
    mutate { add_field => { "environment" => "production" } }
  }
  
  # Replace message field with clean log message
  mutate {
    replace => { "message" => "%{log_message}" }
  }
  
  # Clean Up
  mutate {
    remove_field => ["syslog_pri", "syslog_ver", "process_id", "log_message"]
  }
}

#############################################################################
# OUTPUT: Elasticsearch
#############################################################################
output {
  # Send to Operational Logs Index
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    user => "elastic"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "logs-operational-%{+YYYY.MM.dd}"
    data_stream => false
  }
  
  # If PII Bypass Detected â†’ Send to Security Audit Index
  if "pii_bypass_detected" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTICSEARCH_PASSWORD}"
      index => "logs-security-audit-%{+YYYY.MM.dd}"
      data_stream => false
    }
  }
  
  # CiviCRM Compliance Logs (activities, consent, data access)
  if [drupal_module] == "civicrm" or [drupal_module] == "pii_sanitizer" {
    if [log_message] =~ /consent|gdpr|data_access|user_deletion/ {
      elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        user => "elastic"
        password => "${ELASTICSEARCH_PASSWORD}"
        index => "logs-compliance-%{+YYYY.MM.dd}"
        data_stream => false
      }
    }
  }
}
