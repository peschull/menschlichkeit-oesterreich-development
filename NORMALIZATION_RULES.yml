---
title: Normalization Rules f√ºr Markdown-Dokumentation
description: Vollst√§ndige Spezifikation f√ºr einheitliche Dokumentationsstandards im Repository
status: ACTIVE
version: 1.0.0
created: 2025-10-10
lastUpdated: 2025-10-10
owners:
  - DevOps Team
  - Documentation Team
tags:
  - standards
  - markdown
  - quality
  - automation
category: governance
priority: high
---

# üìê Normalization Rules ‚Äì Markdown Documentation Standards

Dieses Dokument definiert alle Standards f√ºr Markdown-Dokumentation im Repository `menschlichkeit-oesterreich-development`.

---

## üéØ Zielsetzung

1. **Konsistenz:** Einheitliches Format √ºber alle Dokumentationsdateien
2. **Qualit√§t:** Automatisierbare Qualit√§tsmetriken und Pr√ºfungen
3. **Wartbarkeit:** Einfache Pflege und Updates
4. **Auffindbarkeit:** Metadaten f√ºr Suche und Navigation

---

## üìã YAML Front-Matter Schema

### Pflichtfelder (Minimum)

Jede Markdown-Datei **MUSS** folgende Front-Matter Felder enthalten:

```yaml
---
title: [String] Kurze, beschreibende √úberschrift (max. 80 Zeichen)
description: [String] Ein- bis zweizeilige Zusammenfassung (max. 160 Zeichen)
lastUpdated: [YYYY-MM-DD] Datum der letzten √Ñnderung (ISO 8601)
status: [Enum] ACTIVE | DEPRECATED | DRAFT | ARCHIVED
---
```

**Beispiel (Minimal):**

```yaml
---
title: API Authentication Guide
description: OAuth2 und JWT Implementation f√ºr sichere API-Zugriffssteuerung
lastUpdated: 2025-10-10
status: ACTIVE
---
```

### Erweiterte Felder (Empfohlen)

F√ºr bessere Auffindbarkeit und Organisation:

```yaml
---
title: [String]
description: [String]
lastUpdated: [YYYY-MM-DD]
status: [Enum]
created: [YYYY-MM-DD]           # Erstellungsdatum
version: [SemVer]                # z.B. "1.2.3"
owners:                          # Verantwortliche Personen/Teams
  - [String]
  - [String]
tags:                            # Kategorisierung f√ºr Suche
  - [String]
  - [String]
category: [String]               # Hauptkategorie (siehe unten)
priority: [Enum]                 # critical | high | medium | low
applyTo: [String]                # Glob pattern, z.B. "**/*.ts"
relatedDocs:                     # Verwandte Dokumentation
  - [Relative Path]
  - [Relative Path]
---
```

**Beispiel (Vollst√§ndig):**

```yaml
---
title: PostgreSQL Database Schema
description: Vollst√§ndige Datenbankschema-Dokumentation f√ºr alle Services
created: 2025-01-15
lastUpdated: 2025-10-10
status: ACTIVE
version: 2.1.0
owners:
  - Backend Team
  - Database Administrator
tags:
  - database
  - postgresql
  - schema
  - migration
category: architecture
priority: high
applyTo: "**/*.prisma"
relatedDocs:
  - docs/architecture/api-overview.md
  - docs/deployment/database-migrations.md
---
```

### Status-Werte (Enum)

| Wert | Bedeutung | Verwendung |
|------|-----------|------------|
| `ACTIVE` | Aktiv & aktuell | Standard f√ºr produktive Dokumentation |
| `DRAFT` | Entwurf | Work-in-Progress, noch nicht final |
| `DEPRECATED` | Veraltet | Wird nicht mehr aktualisiert, Hinweis auf Ersatz |
| `ARCHIVED` | Archiviert | Historisch relevant, nicht mehr aktiv |

### Category-Werte (Konvention)

Empfohlene Kategorien f√ºr einheitliche Organisation:

- `architecture` ‚Äì System-/Service-Architektur
- `api` ‚Äì API-Dokumentation
- `deployment` ‚Äì Deployment & CI/CD
- `security` ‚Äì Sicherheit & Compliance
- `compliance` ‚Äì DSGVO, Accessibility, Legal
- `governance` ‚Äì Vereinsstatuten, Policies
- `infrastructure` ‚Äì Server, Netzwerk, Monitoring
- `testing` ‚Äì Testing-Strategien & Tools
- `onboarding` ‚Äì Developer-Onboarding
- `design` ‚Äì Design System, Figma
- `automation` ‚Äì n8n, Workflows
- `crm` ‚Äì CiviCRM, Drupal
- `performance` ‚Äì Optimization, Tuning
- `legal` ‚Äì Rechtsdokumente

### Priority-Werte (Enum)

- `critical` ‚Äì Kritisch (z.B. Security, Compliance)
- `high` ‚Äì Hoch (z.B. Architektur, Core Features)
- `medium` ‚Äì Mittel (z.B. Guides, Tutorials)
- `low` ‚Äì Niedrig (z.B. Experimental, Nice-to-have)

---

## üìù Markdown Standards

### CommonMark Compliance

Basis: [CommonMark 0.30](https://spec.commonmark.org/0.30/) mit folgenden Erweiterungen:

#### Erlaubte GFM (GitHub Flavored Markdown) Erweiterungen

- ‚úÖ **Tables** (Pipe Tables)
- ‚úÖ **Task Lists** (`- [ ]` / `- [x]`)
- ‚úÖ **Strikethrough** (`~~text~~`)
- ‚úÖ **Autolinks** (`https://example.com`)
- ‚úÖ **Footnotes** (`[^1]`)
- ‚úÖ **Emoji Shortcodes** (`:smile:`)

#### Erlaubte Zusatz-Features

- ‚úÖ **Mermaid Diagramme** (Code-Blocks mit `mermaid`)
- ‚úÖ **Math (KaTeX)** (Inline `$...$`, Block `$$...$$`)
- ‚úÖ **Admonitions** (z.B. `:::warning`, `:::info`)

**Beispiel Mermaid:**

````markdown
```mermaid
graph TD
    A[Frontend] --> B[API]
    B --> C[Database]
    B --> D[CRM]
```
````

**Beispiel Math:**

```markdown
Die Formel lautet: $E = mc^2$

Komplexere Berechnung:

$$
\int_0^\infty e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
$$
```

**Beispiel Admonition:**

```markdown
:::warning
Diese Funktion ist deprecated und wird in v3.0 entfernt.
:::
```

### Heading-Hierarchie

- **Level 1 (`#`):** Nur EINMAL pro Datei (Titel, sollte mit Front-Matter `title` √ºbereinstimmen)
- **Level 2 (`##`):** Hauptabschnitte
- **Level 3 (`###`):** Unterabschnitte
- **Level 4 (`####`):** Detail-Unterabschnitte
- **Level 5+ (`#####`):** Vermeiden (zu tief verschachtelt)

**Beispiel:**

```markdown
# API Authentication Guide

## OAuth2 Setup

### Client Credentials Flow

#### Token Endpoint Configuration

## JWT Validation

### Token Signature Verification
```

### Code-Blocks

**Immer Sprache angeben** f√ºr Syntax-Highlighting:

````markdown
```typescript
// TypeScript Beispiel
const user: User = { id: 1, name: "Max" };
```

```bash
# Bash Beispiel
npm run dev:all
```

```yaml
# YAML Beispiel
title: Example Document
status: ACTIVE
```
````

**Inline-Code:** Backticks f√ºr Variablen, Dateinamen, Befehle:

```markdown
Die Datei `package.json` enth√§lt den Befehl `npm run dev:all`.
```

### Links

**Interne Links (Relativ):**

```markdown
Siehe auch [Architektur √úbersicht](./architecture/services-overview.md).
```

**Externe Links:**

```markdown
Dokumentation: [FastAPI Docs](https://fastapi.tiangolo.com/)
```

**Anchor Links (innerhalb Dokument):**

```markdown
Siehe [Installation](#installation).

## Installation
```

### Listen

**Unordered Lists:**

```markdown
- Punkt 1
- Punkt 2
  - Unterpunkt 2.1
  - Unterpunkt 2.2
- Punkt 3
```

**Ordered Lists:**

```markdown
1. Schritt 1
2. Schritt 2
   1. Sub-Schritt 2.1
   2. Sub-Schritt 2.2
3. Schritt 3
```

**Task Lists:**

```markdown
- [x] Aufgabe erledigt
- [ ] Aufgabe offen
- [ ] Weitere Aufgabe
```

### Tabellen

**Alignment:**

```markdown
| Links | Zentriert | Rechts |
|-------|:---------:|-------:|
| A     | B         | C      |
| D     | E         | F      |
```

**Empfehlung:** Maximale Tabellenbreite 120 Zeichen (f√ºr Lesbarkeit).

### Bilder

```markdown
![Alt-Text](./images/screenshot.png "Optionaler Titel")
```

**Empfehlung:**

- Bilder in `./images/` oder `./assets/` relativ zur Markdown-Datei
- Alt-Text IMMER angeben (Accessibility)
- WebP oder optimierte PNG/JPG verwenden

### Horizontale Linien

```markdown
---
```

Verwenden f√ºr thematische Abschnittstrennungen (sparsam einsetzen).

---

## üî§ Encoding & Line Endings

### Encoding

**UTF-8 ohne BOM** (Byte Order Mark)

### Line Endings

**LF (Line Feed)** ‚Äì Unix-Style `\n`

**NICHT:** CRLF (Windows-Style `\r\n`)

**.editorconfig:**

```ini
[*.md]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
```

---

## üìè Formatierungs-Regeln

### Zeilenl√§nge

**Maximale Zeilenl√§nge: 120 Zeichen**

Ausnahmen:

- URLs
- Code-Blocks
- Tabellen (wenn nicht anders m√∂glich)

**Soft-Wrap:** Editor-Wrapping erlaubt, aber Markdown-Dateien sollten auf 120 Zeichen hard-wrapped sein (optional).

### Leerzeilen

- **1 Leerzeile** zwischen Paragraphen
- **1 Leerzeile** vor/nach Code-Blocks
- **1 Leerzeile** vor/nach Tabellen
- **1 Leerzeile** vor/nach Headings
- **Keine Leerzeile** am Ende der Datei (au√üer final newline)

**Beispiel:**

```markdown
## Section Title

Dies ist ein Paragraph.

Dies ist ein weiterer Paragraph.

```bash
npm install
```

Weiterer Text nach Code-Block.
```

### Trailing Whitespace

**KEINE** Leerzeichen am Zeilenende (au√üer Markdown Line-Breaks mit 2 Spaces).

### Indentation

**4 Spaces** f√ºr verschachtelte Listen/Code-Blocks innerhalb Listen.

**Beispiel:**

```markdown
- Hauptpunkt
    - Unterpunkt (4 Spaces)
    - Weiterer Unterpunkt
        ```bash
        npm run test
        ```
```

---

## üîç Markdown Linting Rules

Verwende **markdownlint** mit folgenden Rules:

### Aktivierte Rules

| Rule | Beschreibung | Severity |
|------|--------------|----------|
| MD001 | Heading levels increment by one | Error |
| MD003 | Heading style (ATX `#`) | Error |
| MD004 | Unordered list style (Dash `-`) | Warning |
| MD005 | Inconsistent list indentation | Error |
| MD007 | Unordered list indentation (4 spaces) | Warning |
| MD009 | Trailing spaces | Error |
| MD010 | Hard tabs | Error |
| MD011 | Reversed link syntax | Error |
| MD012 | Multiple consecutive blank lines | Warning |
| MD013 | Line length (120 chars) | Warning |
| MD018 | No space after hash in heading | Error |
| MD019 | Multiple spaces after hash | Error |
| MD022 | Headings surrounded by blank lines | Warning |
| MD023 | Headings start at beginning of line | Error |
| MD025 | Single H1 per document | Error |
| MD026 | Trailing punctuation in heading | Warning |
| MD027 | Multiple spaces after blockquote | Error |
| MD028 | Blank line inside blockquote | Warning |
| MD029 | Ordered list item prefix (incremental) | Warning |
| MD030 | Spaces after list markers | Warning |
| MD031 | Fenced code blocks surrounded by blank lines | Warning |
| MD032 | Lists surrounded by blank lines | Warning |
| MD033 | Inline HTML (allowed in specific cases) | Warning |
| MD034 | Bare URLs (should use link syntax) | Warning |
| MD036 | Emphasis instead of heading | Warning |
| MD037 | Spaces inside emphasis markers | Error |
| MD038 | Spaces inside code span | Error |
| MD039 | Spaces inside link text | Error |
| MD040 | Fenced code language (required) | Error |
| MD041 | First line in file should be H1 | Error |
| MD042 | No empty links | Error |
| MD043 | Required heading structure | Info |
| MD044 | Proper names capitalization | Info |
| MD045 | Images should have alt text | Error |
| MD046 | Code block style (fenced) | Warning |
| MD047 | Files should end with newline | Error |
| MD048 | Code fence style (backticks) | Warning |

### Deaktivierte/Angepasste Rules

```json
{
  "MD013": { "line_length": 120, "code_blocks": false, "tables": false },
  "MD033": { "allowed_elements": ["details", "summary", "br", "kbd"] },
  "MD041": { "level": 1 }
}
```

---

## üåç Sprache & Rechtschreibung

### Prim√§rsprachen

1. **Deutsch (√ñsterreich)** ‚Äì `de-AT` f√ºr Vereinsdokumentation
2. **Englisch (US)** ‚Äì `en-US` f√ºr technische Dokumentation

### W√∂rterb√ºcher

**CSpell (Code Spell Checker) Konfiguration:**

```json
{
  "language": "de-AT,en-US",
  "words": [
    "Menschlichkeit",
    "√ñsterreich",
    "CiviCRM",
    "Drupal",
    "PostgreSQL",
    "FastAPI",
    "Playwright",
    "Vite",
    "Tailwind",
    "DSGVO",
    "WCAG",
    "Mitgliedsbeitrag",
    "Beitragsordnung"
  ],
  "ignoreWords": [
    "mkdir",
    "chmod",
    "drush",
    "npx"
  ]
}
```

### Stilrichtlinien

- **√ñsterreichisches Deutsch:** `√§`, `√∂`, `√º`, `√ü` verwenden (NICHT `ae`, `oe`, `ue`, `ss`)
- **Formelle Anrede:** "Sie" (gro√ügeschrieben) in offiziellen Dokumenten
- **Duzen:** "Du" (kleingeschrieben) in Developer-Dokumentation erlaubt
- **Gender-Inklusive Sprache:** `*innen`, `:innen` oder `(m/w/d)` verwenden

**Beispiele:**

```markdown
# Offiziell (Statuten, Legal)
Die Mitglieder verpflichten sich, die Beitr√§ge fristgerecht zu bezahlen.

# Developer Docs (informell)
Du kannst den Server mit `npm run dev:all` starten.

# Inklusiv
Alle Teilnehmer*innen sind willkommen.
Die Entwickler:innen implementieren neue Features.
```

---

## üîó Link-Validierung

### Regeln

1. **Interne Links:** M√úSSEN relativ sein (`./docs/...` oder `../api/...`)
2. **Externe Links:** M√úSSEN absolut sein (`https://...`)
3. **Anchor-Links:** M√úSSEN existieren (`#installation` ‚Üí `## Installation`)
4. **Keine toten Links:** Automatisierte Pr√ºfung via `markdown-link-check`

### Automatisierung

**npm Script:**

```json
{
  "scripts": {
    "test:links": "markdown-link-check --config .markdown-link-check.json **/*.md"
  }
}
```

**.markdown-link-check.json:**

```json
{
  "ignorePatterns": [
    { "pattern": "^http://localhost" },
    { "pattern": "^http://127.0.0.1" }
  ],
  "httpHeaders": [
    {
      "urls": ["https://github.com"],
      "headers": {
        "User-Agent": "Mozilla/5.0"
      }
    }
  ],
  "timeout": "10s",
  "retryOn429": true,
  "retryCount": 3
}
```

---

## ü§ñ Automatisierung & Tooling

### Empfohlene Tools

1. **markdownlint-cli2** ‚Äì Linting
2. **markdown-link-check** ‚Äì Link-Validierung
3. **remark** ‚Äì Markdown-Prozessor (Formatting)
4. **cspell** ‚Äì Spell-Checking
5. **prettier** ‚Äì Auto-Formatting (optional)

### VS Code Extensions

```json
{
  "recommendations": [
    "yzhang.markdown-all-in-one",
    "davidanson.vscode-markdownlint",
    "streetsidesoftware.code-spell-checker",
    "streetsidesoftware.code-spell-checker-german",
    "shd101wyy.markdown-preview-enhanced"
  ]
}
```

### Pre-Commit Hooks (husky + lint-staged)

```json
{
  "lint-staged": {
    "**/*.md": [
      "markdownlint-cli2 --fix",
      "cspell --no-progress",
      "markdown-link-check --quiet"
    ]
  }
}
```

### GitHub Actions Workflow

```yaml
name: Documentation Quality

on: [push, pull_request]

jobs:
  lint-markdown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: npm install -g markdownlint-cli2
      - run: markdownlint-cli2 "**/*.md"
      
  check-links:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.markdown-link-check.json'
```

---

## üìÇ Dateinamens-Konventionen

### Allgemein

- **Lowercase + Kebab-Case:** `database-schema.md`
- **Keine Leerzeichen:** `deployment guide.md` ‚ùå ‚Üí `deployment-guide.md` ‚úÖ
- **Keine Sonderzeichen:** `api_authentication.md` ‚ùå ‚Üí `api-authentication.md` ‚úÖ
- **Keine Timestamps in Dateinamen:** `README-20251010.md` ‚ùå

### Spezielle Dateinamen (Root-Level)

Diese Dateinamen M√úSSEN exakt so sein (Gro√üschreibung):

- `README.md`
- `CHANGELOG.md`
- `CONTRIBUTING.md`
- `LICENSE`
- `SECURITY.md`
- `CODE_OF_CONDUCT.md`
- `SUPPORT.md`

### Service-spezifische READMEs

Format: `<service-name>/README.md`

Beispiele:

- `api.menschlichkeit-oesterreich.at/README.md`
- `frontend/README.md`
- `crm.menschlichkeit-oesterreich.at/README.md`

---

## üìä Qualit√§tsmetriken

### Messgr√∂√üen

1. **Front-Matter Adoption:** Prozentsatz Dateien mit vollst√§ndigem Front-Matter
2. **Link Health:** Prozentsatz funktionierender Links
3. **Linting Pass Rate:** Prozentsatz Dateien ohne Linting-Fehler
4. **Spell Check Pass Rate:** Prozentsatz Dateien ohne Rechtschreibfehler
5. **Documentation Coverage:** Anzahl dokumentierter Services/Module

### Qualit√§tsziele (SLAs)

| Metrik | Zielwert | Kritisch |
|--------|----------|----------|
| Front-Matter Adoption | 100% | < 90% |
| Link Health | 100% | < 95% |
| Linting Pass Rate | 100% | < 98% |
| Spell Check Pass | ‚â• 95% | < 85% |
| Documentation Coverage | 100% Services | < 80% |

### Reporting

**npm Script:**

```json
{
  "scripts": {
    "quality:docs": "node scripts/generate-docs-quality-report.js"
  }
}
```

**Output:** `quality-reports/documentation-quality.md`

---

## üîÑ Migration & Adoption

### Phase 1: Critical Files (Woche 1)

- [ ] Root `README.md`
- [ ] Service READMEs (6 Dateien)
- [ ] `CONTRIBUTING.md`, `SECURITY.md`, `CODE_OF_CONDUCT.md`

### Phase 2: Core Documentation (Woche 2-3)

- [ ] `docs/architecture/**/*.md`
- [ ] `docs/compliance/**/*.md`
- [ ] `docs/security/**/*.md`
- [ ] `docs/deployment/**/*.md`

### Phase 3: Extended Documentation (Woche 4-6)

- [ ] `docs/onboarding/**/*.md`
- [ ] `docs/testing/**/*.md`
- [ ] `docs/api/**/*.md`
- [ ] Alle weiteren `docs/**/*.md`

### Phase 4: Automation & Enforcement (Woche 7+)

- [ ] Pre-Commit Hooks aktivieren
- [ ] GitHub Actions CI/CD Integration
- [ ] Quality Gates in Merge-Prozess
- [ ] Quarterly Documentation Review etablieren

---

## üìö Referenzen

- **CommonMark Spec:** https://spec.commonmark.org/0.30/
- **GitHub Flavored Markdown:** https://github.github.com/gfm/
- **Markdownlint Rules:** https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md
- **Mermaid Documentation:** https://mermaid.js.org/
- **KaTeX Supported Functions:** https://katex.org/docs/supported.html

---

**Version:** 1.0.0  
**Letzte Aktualisierung:** 2025-10-10  
**N√§chster Review:** Quartal Q1 2026
